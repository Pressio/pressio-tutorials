<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="md_pages_rom_tutorial_lindec" kind="page">
    <compoundname>md_pages_rom_tutorial_lindec</compoundname>
    <title>Linear Decoder for Known Types</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para> <mcss:class xmlns:mcss="http://mcss.mosra.cz/doxygen/" mcss:class="m-block m-info" /></para>
<para><simplesect kind="par"><title></title><para>This tutorial shows how to create a linear decoder object when using data types that are known to pressio. Recall that a linear decoder represents a mapping of the form: <formula id="11">\[ {\mathbf y}_{fom} = \mathbf{\phi} {\mathbf y}_{rom} \]</formula> where <formula id="12">$\mathbf{\phi}$</formula> is a matrix (for now assumed constant), <formula id="13">$\mathbf{y}_{rom}$</formula> is the reduced state (or generalized coordinates), and <formula id="14">$\mathbf{y}_{fom}$</formula> is the full-order model (FOM) state. A linear decoder is thus fully defined by its Jacobian matrix.</para>
</simplesect>
</para>
<sect1 id="md_pages_rom_tutorial_lindec_1autotoc_md20">
<title>Types Description</title>
<para><itemizedlist>
<listitem><para><formula id="14">$\mathbf{y}_{fom}$</formula>: this is the FOM state and, therefore, it is a data structure of your application. For example, if your application uses Trilinos/Tpetra, the FOM state can be, e.g., a Tpetra vector. Typically, <formula id="15">$y_{fom}$</formula> is a large (distributed) vector.</para>
</listitem><listitem><para><formula id="12">$\mathbf{\phi}$</formula>: this is the (dense) matrix of this linear mapping (for ROMs, this can be, e.g., POD modes). This should also be a data structure from your application. For example, if you are using Trilinos/Tpetra, this matrix can be, e.g., a Tpetra MultiVector. Typically, <formula id="10">$\phi$</formula> is a large (distributed) dense matrix.</para>
</listitem><listitem><para><formula id="13">$\mathbf{y}_{rom}$</formula>: this is the ROM state. ROM data strutures generally involve small, dense operators that fit well on a single node. In pressio, <emphasis>regardless of what the FOM types are</emphasis>, the data types of the ROM operators are pressio wrappers of either Eigen (always enabled) or Kokkos (optional dependency) types. The user can choose which one to use. The reason of this choice is that ROM operators are always small and dense and fit well on a single node, as explained [here]( <mcss:span xmlns:mcss="http://mcss.mosra.cz/doxygen/" mcss:class="m-text m-danger">todo</mcss:span>).</para>
</listitem></itemizedlist>
</para>
<para>For demonstration purposes, here we use Eigen types for the FOM. For other types already known to pressio, this would work similarly.</para>
</sect1>
<sect1 id="md_pages_rom_tutorial_lindec_1autotoc_md21">
<title>Main function</title>
<para><programlisting filename=".cpp"><codeline><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*argv[])</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Running<sp/>tutorial\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>native_fom_state_t<sp/>=<sp/>Eigen::VectorXd;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>native_phi_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Eigen::MatrixXd;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>wrap<sp/>native<sp/>types<sp/>with<sp/>pressio<sp/>containers</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>fom_state_t<sp/>=<sp/>pressio::containers::Vector&lt;native_fom_state_t&gt;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>phi_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>pressio::containers::DenseMatrix&lt;native_phi_t&gt;;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>native<sp/>phi,<sp/>and<sp/>for<sp/>simplicity<sp/>fill<sp/>with<sp/>ones</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>native_phi_t<sp/>phiNative(6,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>phiNative.setConstant(1.);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>construct<sp/>linear<sp/>decoder</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>decoder_t<sp/>=<sp/>pressio::rom::LinearDecoder&lt;phi_t,<sp/>fom_state_t&gt;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>decoder_t<sp/>decoder(std::move(phiNative));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>construct<sp/>the<sp/>reduced<sp/>state,<sp/>fill<sp/>with<sp/>2s</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>rom_state_t<sp/>=<sp/>pressio::containers::Vector&lt;Eigen::VectorXd&gt;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>rom_state_t<sp/>yRom(3);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pressio::ops::fill(yRom,<sp/>2.);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>apply<sp/>mapping:<sp/>computes<sp/>yFom<sp/>=<sp/>phi<sp/>yRom</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>fom_state_t<sp/>yFom(6);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>decoder.applyMapping(yRom,<sp/>yFom);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;yFom.extent(0);<sp/>++i)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;i=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>yFom(i)<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/><sp/>&lt;&lt;<sp/>yFom(i)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>expected<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>6.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
</sect1>
<sect1 id="md_pages_rom_tutorial_lindec_1autotoc_md22">
<title>Code Breakdown</title>
<para>The main function starts with type aliasing: <programlisting filename=".cpp"><codeline><highlight class="keyword">using</highlight><highlight class="normal"><sp/>native_fom_state_t<sp/>=<sp/>Eigen::VectorXd;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>native_phi_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Eigen::MatrixXd;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>wrap<sp/>native<sp/>types<sp/>with<sp/>pressio<sp/>containers</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>fom_state_t<sp/>=<sp/>pressio::containers::Vector&lt;native_fom_state_t&gt;;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>phi_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>pressio::containers::DenseMatrix&lt;native_phi_t&gt;;</highlight></codeline>
</programlisting> where we explictly create pressio wrapper types for the FOM state and decoder Jacobian <formula id="10">$\phi$</formula>. This is needed because pressio operates on these wrapper types.</para>
<para>We then create a native matrix: <programlisting filename=".cpp"><codeline><highlight class="comment">//<sp/>create<sp/>native<sp/>phi,<sp/>and<sp/>for<sp/>simplicity<sp/>fill<sp/>with<sp/>ones</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">native_phi_t<sp/>phiNative(6,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">phiNative.setConstant(1.);</highlight></codeline>
</programlisting> Note that this is a native type, so in this case Eigen.</para>
<para>The decoder object is instantiated here: <programlisting filename=".cpp"><codeline><highlight class="keyword">using</highlight><highlight class="normal"><sp/>decoder_t<sp/>=<sp/>pressio::rom::LinearDecoder&lt;phi_t,<sp/>fom_state_t&gt;;</highlight></codeline>
<codeline><highlight class="normal">decoder_t<sp/>decoder(std::move(phiNative));</highlight></codeline>
</programlisting> Note that the native object <computeroutput>phiNative</computeroutput> is moved from (since Eigen supports move semantics) to avoid a deep copy. After the move, <computeroutput>phiNative</computeroutput> is left in undefined state, so it should not be used. One can also do <computeroutput>decoder(phiNative)</computeroutput> which implies a deep copy of the matrix, and obviously, if the matrix is large avoiding a copy is useful.</para>
<para>To perform the computation, the <computeroutput>LinearDecoder</computeroutput> class exposes an <computeroutput>applyMapping</computeroutput> method: <programlisting filename=".cpp"><codeline><highlight class="comment">//<sp/>apply<sp/>mapping:<sp/>computes<sp/>yFom<sp/>=<sp/>phi<sp/>yRom</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">fom_state_t<sp/>yFom(6);</highlight></codeline>
<codeline><highlight class="normal">decoder.applyMapping(yRom,<sp/>yFom);</highlight></codeline>
</programlisting></para>
</sect1>
<sect1 id="md_pages_rom_tutorial_lindec_1autotoc_md23">
<title>Full Code</title>
<para>The full tutorial can be found <ulink url="https://github.com/Pressio/pressio-tutorials/blob/master/tutorials/tut_rom_1.cc">here</ulink>. </para>
</sect1>
    </detaileddescription>
    <location file="pages/rom/tutorial_lindec.md"/>
  </compounddef>
</doxygen>
