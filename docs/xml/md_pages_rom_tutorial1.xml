<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="md_pages_rom_tutorial1" kind="page">
    <compoundname>md_pages_rom_tutorial1</compoundname>
    <title>Tutorial: Linear Decoder</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para> <mcss:class xmlns:mcss="http://mcss.mosra.cz/doxygen/" mcss:class="m-block m-info" /></para>
<para><simplesect kind="par"><title></title><para>This tutorial shows how to create a pressio linear decoder object.</para>
</simplesect>
</para>
<sect1 id="md_pages_rom_tutorial1_1autotoc_md5">
<title>Context</title>
<para>A key assumption of projection-based ROMs is to approximate the full-order model (FOM) state, <formula id="0">$y_{fom}$</formula>, as: <formula id="1">\[ y_{fom} = g(y_{rom}) \]</formula></para>
<para>where <formula id="2">$y_{rom}$</formula> is the reduced state (or generalized coordinates), and <formula id="3">$g$</formula> is the mapping between the two.</para>
<para>If <formula id="3">$g$</formula> is linear, then we can write: <formula id="4">\[ y_{fom} = \phi y_{rom} \]</formula> where <formula id="5">$\phi$</formula> is a matrix (for the time being, assume it constant). The Jacobian of the mapping is: <formula id="6">\[ \frac{d y_{fom}}{d y_{rom}} = \phi. \]</formula></para>
<para>Graphically, this corresponds to: <image type="html" name="tut_f1.png" width="35%"></image>
</para>
<para><emphasis>A linear decoder in pressio implements this linear mapping.</emphasis></para>
</sect1>
<sect1 id="md_pages_rom_tutorial1_1autotoc_md6">
<title>Types Description</title>
<para><itemizedlist>
<listitem><para><formula id="0">$y_{fom}$</formula>: this is the FOM state and, therefore, it is a data structure of your application. For example, if you are using Trilinos/Epetra, the FOM state can be, e.g., an Epetra vector. Typically, <formula id="0">$y_{fom}$</formula> is a large (distributed) vector.</para>
</listitem><listitem><para><formula id="5">$\phi$</formula>: this is the matrix of the linear mapping (e.g. POD modes). Should be a data structure from your application. For example, if you are using Trilinos/Epetra, the FOM state can be, e.g., an Epetra MultiVector. Typically, <formula id="5">$\phi$</formula> is a large (distributed) matrix.</para>
</listitem><listitem><para><formula id="2">$y_{rom}$</formula>: this is the ROM state. ROM data strutures generally involve small, dense operators that fit well on a single node. In pressio, <emphasis>regardless of what the FOM types are</emphasis>, the ROM operators/data structures are either Eigen (always enabled) or Kokkos (optional dependency) types.</para>
</listitem></itemizedlist>
</para>
</sect1>
<sect1 id="md_pages_rom_tutorial1_1autotoc_md7">
<title>Scenario A: your FOM types are natively supported in pressio</title>
<para>This case refers to data types which pressio knows how to manipulate and operate on. Examples include vector and matrix classes in Eigen, Epetra/Tpetra in Trilinos, or Kokkos views. What do we mean by <emphasis>natively supported</emphasis>? If you try to use a pressio functionality/class using data structure types that are already supported/known to pressio, pressio <emphasis>detects</emphasis> them, and automatically uses the (best) native kernels to perform computations. The full list of supported data structures types can be found [here]( <mcss:span xmlns:mcss="http://mcss.mosra.cz/doxygen/" mcss:class="m-text m-danger">todo</mcss:span>).</para>
<para>Here, for demonstration purposes, we pretend the FOM uses Eigen types too. For other FOM types already known to pressio it would work similarly. The full tutorial can be found <ulink url="https://github.com/Pressio/pressio-tutorials/blob/master/tutorials/tutorial4.cc">here</ulink>.</para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal">@codesnippet</highlight></codeline>
<codeline><highlight class="normal">../../../../pressio-tutorials/tutorials/tutorial4.cc</highlight></codeline>
<codeline><highlight class="normal">51:104</highlight></codeline>
</programlisting></para>
</sect1>
<sect1 id="md_pages_rom_tutorial1_1autotoc_md8">
<title>Scenario B: your FOM types are NOT natively supported in pressio</title>
<para>This case refers to data types which pressio does <emphasis>not</emphasis> know how to manipulate and operate on. What do we mean by <emphasis>not natively supported</emphasis>? If you try to use a pressio functionality/class usign a data structure type that is <bold>NOT</bold> already supported/known to pressio, pressio <emphasis>detects/labels</emphasis> it as an <emphasis>arbitrary</emphasis> type, and you <bold>have to</bold> provide pressio with kernels to operate on these types.</para>
<para>Here, for demonstration, we pretend that:<itemizedlist>
<listitem><para><formula id="0">$y_{fom}$</formula> is a <computeroutput>std::vector&lt;&gt;</computeroutput></para>
</listitem><listitem><para><formula id="5">$\phi$</formula> is a <computeroutput>std::vector&lt;std::vector&lt;&gt;&gt;</computeroutput></para>
</listitem></itemizedlist>
</para>
<para>Note that the code below would work for any other "arbitrary&apos;&apos; (not known to pressio) type, whether they are distributed or not. The full tutorial can be found <ulink url="https://github.com/Pressio/pressio-tutorials/blob/master/tutorials/tutorial5.cc">here</ulink>.</para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal">@codesnippet</highlight></codeline>
<codeline><highlight class="normal">../../../../pressio-tutorials/tutorials/tutorial5.cc</highlight></codeline>
<codeline><highlight class="normal">75:137</highlight></codeline>
</programlisting></para>
<sect2 id="md_pages_rom_tutorial1_1autotoc_md9">
<title>The ops struct</title>
<para>In order for pressio to handle the linear mapping, it needs to know how to operate on <formula id="5">$\phi$</formula>. To this end, in the code above, you need to pass to the <computeroutput>LinearDecoder</computeroutput> constructor an object to handle that computation. To compute the mapping, pressio will call the <computeroutput>product</computeroutput> method. <programlisting filename=".cpp"><codeline><highlight class="normal">@codesnippet</highlight></codeline>
<codeline><highlight class="normal">../../../../pressio-tutorials/tutorials/tutorial5.cc</highlight></codeline>
<codeline><highlight class="normal">51:73</highlight></codeline>
</programlisting></para>
</sect2>
</sect1>
<sect1 id="md_pages_rom_tutorial1_1autotoc_md10">
<title>Comments</title>
<para>We are constantly working increasing support in pressio for more external libraries. If you application types are not supported but you would like them to be, you can file an <ulink url="https://github.com/Pressio/pressio/issues">issue</ulink> to request it. </para>
</sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
