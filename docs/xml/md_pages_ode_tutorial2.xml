<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="md_pages_ode_tutorial2" kind="page">
    <compoundname>md_pages_ode_tutorial2</compoundname>
    <title>Explicit Time Integration: Custom Types</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para> <mcss:class xmlns:mcss="http://mcss.mosra.cz/doxygen/" mcss:class="m-block m-info" /></para>
<para><simplesect kind="par"><title></title><para>This tutorial shows how to do <emphasis>explicit time integration</emphasis> in pressio with custom types, i.e. data types that pressio does not know how to operate on.</para>
</simplesect>
<programlisting filename=".cpp"><codeline><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*argv[])</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Running<sp/>tutorial<sp/>3\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/>We<sp/>illustrate<sp/>here<sp/>how<sp/>to<sp/>leverage<sp/>the<sp/>package<sp/>pressio/ode<sp/>to<sp/>do</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/>explicit<sp/>time-integration<sp/>for<sp/>a<sp/>system<sp/>of<sp/>ODEs<sp/>with<sp/>arbitrary<sp/>data<sp/>types.</highlight></codeline>
<codeline><highlight class="comment"></highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/>As<sp/>mentioned<sp/>in<sp/>tutorial1,<sp/>pressio<sp/>can<sp/>handle<sp/>types<sp/>for<sp/>which<sp/>we<sp/>have<sp/>wrappers</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/>as<sp/>well<sp/>as<sp/>unknown<sp/>arbitrary<sp/>types.<sp/>While<sp/>for<sp/>the<sp/>former<sp/>case<sp/>pressio</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/>knows<sp/>how<sp/>to<sp/>do<sp/>linear<sp/>algebra,<sp/>for<sp/>the<sp/>latter<sp/>case,<sp/>i.e.<sp/>unknown<sp/>types,</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/>pressio<sp/>does<sp/>not<sp/>know<sp/>which<sp/>methods<sp/>those<sp/>data<sp/>structures<sp/>support.</highlight></codeline>
<codeline><highlight class="comment"></highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/>pressio<sp/>supports<sp/>arbitrary<sp/>type<sp/>via<sp/>generic<sp/>programming<sp/>and<sp/>type<sp/>introspection.</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/>For<sp/>example,<sp/>if<sp/>a<sp/>vector<sp/>container<sp/>wrapper<sp/>is<sp/>templated<sp/>on<sp/>a<sp/>Eigen::VectorXd,</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/>pressio<sp/>detects/recognizes<sp/>the<sp/>type<sp/>and<sp/>leverages<sp/>the<sp/>native<sp/>algebra<sp/>of<sp/>Eigen.</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/>If<sp/>the<sp/>user<sp/>instantiates<sp/>a<sp/>vector<sp/>templated<sp/>on<sp/>an</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/>arbitrary<sp/>vector<sp/>type<sp/>(for<sp/>example<sp/>user-defined),<sp/>then<sp/>pressio<sp/>is<sp/>also<sp/>able<sp/>to</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/>detect<sp/>that<sp/>this<sp/>is<sp/>an<sp/>&apos;&apos;unknown&apos;&apos;<sp/>type,<sp/>and<sp/>the<sp/>user<sp/>needs<sp/>to<sp/>provide</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/>the<sp/>necessary<sp/>operations<sp/>to<sp/>do<sp/>the<sp/>algebra.</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/>These<sp/>operations<sp/>can<sp/>be<sp/>passed<sp/>to<sp/>pressio<sp/>either<sp/>as<sp/>function<sp/>objects.</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/>This<sp/>discussion<sp/>will<sp/>be<sp/>clear<sp/>from<sp/>the<sp/>example<sp/>below.</highlight></codeline>
<codeline><highlight class="comment"></highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/>Suppose<sp/>that<sp/>you<sp/>need<sp/>to<sp/>use<sp/>some<sp/>pressio/ode<sp/>package<sp/>for<sp/>doing<sp/>explicit<sp/>time</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/>integration<sp/>of<sp/>a<sp/>system<sp/>of<sp/>ODEs<sp/>which<sp/>is<sp/>implemented<sp/>using<sp/>the<sp/>C++<sp/>STL.</highlight></codeline>
<codeline><highlight class="comment"></highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/>For<sp/>the<sp/>sake<sp/>of<sp/>explanation,<sp/>MyApp<sp/>at<sp/>the<sp/>top<sp/>of<sp/>this<sp/>page<sp/>is<sp/>a<sp/>class</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/>that<sp/>defines<sp/>the<sp/>target<sp/>system<sp/>of<sp/>ODEs<sp/>using<sp/>std::vectors&lt;&gt;,<sp/>and<sp/>meets</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/>the<sp/>API<sp/>needed<sp/>by<sp/>pressio<sp/>to<sp/>run<sp/>explicit<sp/>time<sp/>integration,<sp/>i.e.:</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/>(a)<sp/>it<sp/>has<sp/>typedefs<sp/>for<sp/>scalar,<sp/>state<sp/>and<sp/>velicity</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/>(b)<sp/>it<sp/>has<sp/>a<sp/>velocity()<sp/>and<sp/>createVelocity()<sp/>method</highlight></codeline>
<codeline><highlight class="comment"></highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/>As<sp/>long<sp/>as<sp/>the<sp/>user-defined<sp/>class/app<sp/>or<sp/>whatever<sp/>name<sp/>you<sp/>want<sp/>to<sp/>call<sp/>has<sp/>an</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/>API<sp/>as<sp/>MyApp,<sp/>then<sp/>it<sp/>can<sp/>be<sp/>used<sp/>with<sp/>pressio<sp/>for<sp/>explicit<sp/>time<sp/>integratio..</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/>Note<sp/>that<sp/>if<sp/>you<sp/>try<sp/>to<sp/>run<sp/>an<sp/>explicit<sp/>time<sp/>integration<sp/>with<sp/>a<sp/>user-defined<sp/>system</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/>that<sp/>does<sp/>not<sp/>satisfy<sp/>the<sp/>target<sp/>API,<sp/>pressio<sp/>throws<sp/>a<sp/>compile-time<sp/>error.</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>this<sp/>tutorial,<sp/>we<sp/>run<sp/>Forward<sp/>Euler<sp/>on<sp/>the<sp/>system<sp/>defined<sp/>by<sp/>MyApp.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>***<sp/>define<sp/>some<sp/>types<sp/>***</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>app_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>MyApp;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>scalar_t<sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>app_t::scalar_type;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>native_state_t<sp/><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>app_t::state_type;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>native_veloc_t<sp/><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>app_t::velocity_type;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>***<sp/>create<sp/>the<sp/>app<sp/>object<sp/>***</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>app_t<sp/>appObj;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>***<sp/>define<sp/>pressio<sp/>wrapper<sp/>types<sp/>for<sp/>the<sp/>state<sp/>***</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>this<sp/>case,<sp/>pressio<sp/>behind<sp/>the<sp/>scenes<sp/>detects<sp/>what<sp/>type<sp/>you</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>are<sp/>passing<sp/>as<sp/>template<sp/>argument<sp/>and<sp/>since<sp/>it<sp/>is<sp/>not<sp/>(for<sp/>now)<sp/>supported,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>pressio<sp/>still<sp/>wraps<sp/>the<sp/>object<sp/>but<sp/>does<sp/>not<sp/>know<sp/>how<sp/>to<sp/>do<sp/>anythin<sp/>else.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>state_t<sp/>=<sp/>::pressio::containers::Vector&lt;native_state_t&gt;;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>***<sp/>create<sp/>the<sp/>initial<sp/>state<sp/>object<sp/>***</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>state_t<sp/>y(3);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>***<sp/>fill<sp/>the<sp/>initial<sp/>state<sp/>vector<sp/>***</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>any<sp/>pressio<sp/>wrapper<sp/>provides<sp/>the<sp/>data()<sp/>method<sp/>to<sp/>get<sp/>a<sp/>pointer<sp/>to<sp/>the<sp/>wrapped<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>yptr<sp/>=<sp/>y.data();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>i<sp/>can<sp/>now<sp/>use<sp/>regular<sp/>std<sp/>vector<sp/>[]<sp/>operator<sp/>to<sp/>fill<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>(*yptr)[0]<sp/>=<sp/>1.;<sp/>(*yptr)[1]<sp/>=<sp/>2.;<sp/>(*yptr)[2]<sp/>=<sp/>3.;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>***<sp/>create<sp/>the<sp/>pressio<sp/>stepper<sp/>***</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>since<sp/>we<sp/>are<sp/>using<sp/>a<sp/>custom<sp/>data<sp/>stucture<sp/>type,<sp/>we<sp/>also<sp/>need<sp/>to<sp/>inform<sp/>pressio</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>how<sp/>to<sp/>do<sp/>operations,<sp/>like<sp/>vector<sp/>additions,<sp/>etc.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>this<sp/>end,<sp/>we<sp/>use<sp/>a<sp/>class<sp/>&quot;myops&quot;<sp/>see<sp/>above,<sp/>with<sp/>static<sp/>methods</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>with<sp/>specific<sp/>signatures<sp/>tht<sp/>pressio<sp/>will<sp/>look<sp/>for.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>pressio<sp/>will<sp/>complain<sp/>at<sp/>compile<sp/>time<sp/>if:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>you<sp/>forget<sp/>to<sp/>pass<sp/>the<sp/>myops<sp/>template<sp/>to<sp/>the<sp/>stepper</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>your<sp/>ops<sp/>class<sp/>type<sp/>does<sp/>not<sp/>have<sp/>the<sp/>right<sp/>methods<sp/>needed<sp/>for<sp/>the<sp/>stepper<sp/>you<sp/>want</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>your<sp/>ops<sp/>class<sp/>type<sp/>does<sp/>not<sp/>have<sp/>methods<sp/>that<sp/>match<sp/>what<sp/>pressio<sp/>needs.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>pressio<sp/>will<sp/>introspect<sp/>your<sp/>type<sp/>to<sp/>check<sp/>if<sp/>it<sp/>is<sp/>an<sp/>admissible<sp/>ops<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>my_custom_ops<sp/>=<sp/>MyOps&lt;scalar_t&gt;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>my_custom_ops<sp/>ops;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>ode_tag<sp/>=<sp/>::pressio::ode::explicitmethods::Euler;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>stepper_t<sp/>=<sp/>::pressio::ode::ExplicitStepper&lt;ode_tag,<sp/>state_t,<sp/>app_t,<sp/>my_custom_ops&gt;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>stepper_t<sp/>stepperObj(y,<sp/>appObj,<sp/>ops);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>***<sp/>integrated<sp/>in<sp/>time<sp/>***</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>scalar_t<sp/>dt<sp/>=<sp/>0.1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>::pressio::ode::advanceNSteps(stepperObj,<sp/>y,<sp/>0.0,<sp/>dt,<sp/>1ul);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>note<sp/>that<sp/>for<sp/>this<sp/>system<sp/>and<sp/>settings,<sp/>the<sp/>solution<sp/>printed<sp/>should<sp/>be<sp/>2,4,6</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Computed<sp/>solution:<sp/>[&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>(*yptr)[0]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(*yptr)[1]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(*yptr)[2]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>solution:<sp/>[2,4,6]<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>And the system class is: <programlisting filename=".cpp"><codeline><highlight class="keyword">struct<sp/></highlight><highlight class="normal">MyApp{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>scalar_type<sp/><sp/><sp/>=<sp/>double;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>state_type<sp/><sp/><sp/><sp/>=<sp/>std::vector&lt;scalar_type&gt;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>velocity_type<sp/>=<sp/>state_type;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>velocity(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>state_type<sp/>&amp;<sp/>y,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scalar_type<sp/>t,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>velocity_type<sp/>&amp;<sp/>R)</highlight><highlight class="keyword"><sp/>const</highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>R[0]<sp/>=<sp/>10.<sp/>*<sp/>y[0];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>R[1]<sp/>=<sp/>10.<sp/>*<sp/>y[1];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>R[2]<sp/>=<sp/>10.<sp/>*<sp/>y[2];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>velocity_type<sp/>createVelocity()</highlight><highlight class="keyword"><sp/>const</highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>velocity_type(3);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para>
<para>And the ops class is: <programlisting filename=".cpp"><codeline><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>scalar_t&gt;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">MyOps</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>v_t<sp/>=<sp/>std::vector&lt;scalar_t&gt;;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>update(v_t<sp/>&amp;<sp/>v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v_t<sp/>&amp;<sp/>v1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>scalar_t<sp/>b)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;v.size();<sp/>++i)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v[i]<sp/>=<sp/>b*v1[i];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>update(v_t<sp/>&amp;<sp/>v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>scalar_t<sp/>a,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>v_t<sp/>&amp;<sp/>v1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>scalar_t<sp/>b)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;v.size();<sp/>++i)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v[i]<sp/>=<sp/>a*v[i]<sp/>+<sp/>b*v1[i];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting> </para>
    </detaileddescription>
  </compounddef>
</doxygen>
