<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="md_pages_swe_fom" kind="page">
    <compoundname>md_pages_swe_fom</compoundname>
    <title>FOM Driver</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para> <mcss:class xmlns:mcss="http://mcss.mosra.cz/doxygen/" mcss:class="m-block m-info" /></para>
<para><simplesect kind="par"><title></title><para>This page walks through the code to solve the FOM of the SWE using Pressio&apos;s time marching schemes. <linebreak/>
 The full code is available <ulink url="https://github.com/Pressio/pressio-tutorials/blob/swe2d_tutorial/tutorials/swe2d/main_fom.cc">here</ulink>.</para>
</simplesect>
First, we include the relevant headers. <programlisting filename=".cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;pressio_ode_implicit.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pressio_apps.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;CLI11.hpp&quot;</highlight></codeline>
</programlisting></para>
<para>The main function starts by processing the command line arguments: this allows one to set up several parameters, but for all of the them we have default values as shown below. <programlisting filename=".cpp"><codeline><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*argv[])</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>CLI::App<sp/>app{</highlight><highlight class="stringliteral">&quot;2D<sp/>Shallow<sp/>Water<sp/>Equations<sp/>using<sp/>Eigen<sp/>data<sp/>types<sp/>and<sp/>Crank<sp/>Nicolson<sp/>time<sp/>stepping&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>scalar_t<sp/>=<sp/>double;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N<sp/>=<sp/>64;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>scalar_t<sp/>finalTime<sp/>=<sp/>10.;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>scalar_t<sp/>dt<sp/>=<sp/>0.02;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;scalar_t&gt;<sp/>gravity<sp/>=<sp/>{7.5};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>scalar_t<sp/>pulse<sp/><sp/>=<sp/>0.125;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;scalar_t&gt;<sp/>forcing<sp/>=<sp/>{0.2};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>app.add_option(</highlight><highlight class="stringliteral">&quot;-N,--numCells&quot;</highlight><highlight class="normal">,<sp/>N,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Number<sp/>of<sp/>cells<sp/>along<sp/>each<sp/>axis:<sp/>default<sp/>=<sp/>64&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>app.add_option(</highlight><highlight class="stringliteral">&quot;-T,--finalTime&quot;</highlight><highlight class="normal">,<sp/>finalTime,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Simulation<sp/>time:<sp/>default<sp/>=<sp/>10.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>app.add_option(</highlight><highlight class="stringliteral">&quot;--dt&quot;</highlight><highlight class="normal">,<sp/>dt,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Time<sp/>step<sp/>size:<sp/>default<sp/>=<sp/>0.02&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>app.add_option(</highlight><highlight class="stringliteral">&quot;-g,--gravity&quot;</highlight><highlight class="normal">,<sp/>gravity,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Gravity<sp/>value(s)<sp/>to<sp/>simulate:<sp/>default<sp/>=<sp/>7.5&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>app.add_option(</highlight><highlight class="stringliteral">&quot;-p,--pulse&quot;</highlight><highlight class="normal">,<sp/>pulse,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Pulse<sp/>magnitude,<sp/>default<sp/>=<sp/>0.125&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>app.add_option(</highlight><highlight class="stringliteral">&quot;-f,--forcing&quot;</highlight><highlight class="normal">,<sp/>forcing,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Forcing<sp/>value(s)<sp/>to<sp/>simulate:<sp/>default<sp/>=<sp/>0.2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>CLI11_PARSE(app,<sp/>argc,<sp/>argv);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printInputArgs(gravity,<sp/>pulse,<sp/>forcing);</highlight></codeline>
</programlisting></para>
<para>Then, we create some convenient types aliases. Here, we start by defining our application to be the swe2d app, and then extract the relevant types from the application class. After extracting the relevant types, we create an object of the problem of interest by specifying the number of cells to use along each axis. Be default, the app class uses a physical domain (0,5). <programlisting filename=".cpp"><codeline><highlight class="keyword">using</highlight><highlight class="normal"><sp/>app_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>::pressio::apps::swe2d;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>app_state_t<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>app_t::state_type;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>app_rhs_t<sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>app_t::velocity_type;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>app_jacob_t<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>app_t::jacobian_type;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>create<sp/>FOM<sp/>object/problem:<sp/>contains<sp/>grid,<sp/>how<sp/>to<sp/>compute<sp/>operators,<sp/>etc</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">app_t<sp/>appObj(N);</highlight></codeline>
</programlisting></para>
<para>Next, we construct a Crank Nicolson time stepper that we will use to march the problem in time. In Pressio, the steppers (1) act on Pressio data types that wrap the native datatype and (2) are templated on the time scheme types for the state, residual, Jacobian, and application. As such, we first define the relevant Pressio wrapped data types, and then define the stepper type. <programlisting filename=".cpp"><codeline><highlight class="keyword">using</highlight><highlight class="normal"><sp/>ode_state_t<sp/><sp/><sp/><sp/><sp/>=<sp/>pressio::containers::Vector&lt;app_state_t&gt;;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>ode_residual_t<sp/><sp/>=<sp/>pressio::containers::Vector&lt;app_rhs_t&gt;;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>ode_jacobian_t<sp/><sp/>=<sp/>pressio::containers::SparseMatrix&lt;app_jacob_t&gt;;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>ode_tag<sp/>=<sp/>pressio::ode::implicitmethods::CrankNicolson;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>stepper_t<sp/>=<sp/>pressio::ode::ImplicitStepper&lt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ode_tag,<sp/>ode_state_t,<sp/>ode_residual_t,<sp/>ode_jacobian_t,<sp/>app_t&gt;;</highlight></codeline>
</programlisting></para>
<para>Next, we create the linear solver that is used within the nonlinear one. Here, we use the stabilized bi-conjugate gradient method. <programlisting filename=".cpp"><codeline><highlight class="comment">//<sp/>linear<sp/>solver</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>solver_tag<sp/>=<sp/>pressio::solvers::linear::iterative::Bicgstab;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>lin_solver_t<sp/>=<sp/>pressio::solvers::linear::Solver&lt;solver_tag,<sp/>ode_jacobian_t&gt;;</highlight></codeline>
<codeline><highlight class="normal">lin_solver_t<sp/>linSolverObj;</highlight></codeline>
</programlisting></para>
<para>Finally, we define the time grid, loop over the parameter instances, and solve the FOM. <programlisting filename=".cpp"><codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>solve<sp/>for<sp/>each<sp/>parameter</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>Nsteps<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">::pressio::ode::types::step_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(finalTime/dt);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>runCounter<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>it0<sp/>:<sp/>gravity)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>it2<sp/>:<sp/>forcing)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>physical<sp/>coefficients</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>scalar_t<sp/>params[3]<sp/>=<sp/>{it0,<sp/>pulse,<sp/>it2};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>appObj.setParams(params);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>initial<sp/>condition</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ode_state_t<sp/>state(appObj.getGaussianIC(pulse));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>stepper</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stepper_t<sp/>stepperObj(state,<sp/>appObj);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>observer<sp/>(see<sp/>class<sp/>at<sp/>top)<sp/>to<sp/>monitor<sp/>state<sp/>during<sp/>time<sp/>evolution</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>such<sp/>that<sp/>the<sp/>data<sp/>is<sp/>then<sp/>stored</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>filename<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;solution&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>filename<sp/>+=<sp/>std::to_string(runCounter++)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.bin&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>observer&lt;ode_state_t&gt;<sp/>Obs(filename);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//create<sp/>nonlinear<sp/>solver</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>NonLinSolver<sp/>=<sp/>pressio::solvers::nonlinear::createNewtonRaphson(stepperObj,<sp/>state,<sp/>linSolverObj);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NonLinSolver.setTolerance(1e-11);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>run<sp/>time<sp/>integration<sp/>and<sp/>time<sp/>execution</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>startTime<sp/>=<sp/>std::chrono::high_resolution_clock::now();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pressio::ode::advanceNSteps(stepperObj,<sp/>state,<sp/>0.,<sp/>dt,<sp/>Nsteps,<sp/>Obs,<sp/>NonLinSolver);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>finishTime<sp/>=<sp/>std::chrono::high_resolution_clock::now();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::chrono::duration&lt;double&gt;<sp/>elapsed2<sp/>=<sp/>finishTime<sp/>-<sp/>startTime;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Walltime<sp/>(single<sp/>FOM<sp/>run)<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>elapsed2.count()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>This completes our description of writing the FOM coupler. </para>
    </detaileddescription>
  </compounddef>
</doxygen>
